#–≤–æ–¥—è–Ω–æ–π
import tkinter as tk
from tkinter import messagebox, ttk
from threading import Thread
import time

class WaterTrackerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–í–æ–¥—è–Ω–æ–π")
        self.root.geometry("400x550")
        self.root.configure(bg="#f0f8ff")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.daily_goal = 2000  # –º–ª (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–æ—Ä–º–∞)
        self.current_water = 0
        self.reminder_enabled = True
        self.reminder_interval = 60  # –º–∏–Ω—É—Ç—ã
        self.last_reminder_time = 0
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.reminder_thread = Thread(target=self.reminder_loop, daemon=True)
        self.reminder_thread.start()

        # –í–∏–¥–∂–µ—Ç—ã
        self.setup_ui()

    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            self.root,
            text="–í–æ–¥—è–Ω–æ–π",
            font=("Arial", 24, "bold"),
            bg="#f0f8ff",
            fg="#4682b4"
        )
        title_label.pack(pady=20)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(
            self.root,
            orient="horizontal",
            length=300,
            mode="determinate"
        )
        self.progress.pack(pady=10)

        # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤ %)
        self.progress_label = tk.Label(
            self.root,
            text="0%",
            font=("Arial", 14),
            bg="#f0f8ff"
        )
        self.progress_label.pack()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã
        self.water_label = tk.Label(
            self.root,
            text=f"–í—ã–ø–∏—Ç–æ: 0 –º–ª / {self.daily_goal} –º–ª",
            font=("Arial", 12),
            bg="#f0f8ff"
        )
        self.water_label.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
        buttons_frame = tk.Frame(self.root, bg="#f0f8ff")
        buttons_frame.pack(pady=20)

        button_100 = tk.Button(
            buttons_frame,
            text="+100 –º–ª",
            command=lambda: self.add_water(100),
            bg="#add8e6",
            padx=10,
            pady=5
        )
        button_100.grid(row=0, column=0, padx=5)

        button_250 = tk.Button(
            buttons_frame,
            text="+250 –º–ª",
            command=lambda: self.add_water(250),
            bg="#87ceeb",
            padx=10,
            pady=5
        )
        button_250.grid(row=0, column=1, padx=5)

        button_500 = tk.Button(
            buttons_frame,
            text="+500 –º–ª",
            command=lambda: self.add_water(500),
            bg="#4682b4",
            fg="white",
            padx=10,
            pady=5
        )
        button_500.grid(row=0, column=2, padx=5)

        # –†—É—á–Ω–æ–π –≤–≤–æ–¥
        input_frame = tk.Frame(self.root, bg="#f0f8ff")
        input_frame.pack(pady=10)

        self.entry = tk.Entry(input_frame, width=10, font=("Arial", 12))
        self.entry.grid(row=0, column=0, padx=5)

        add_button = tk.Button(
            input_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å (–º–ª)",
            command=self.add_custom_water,
            bg="#e6e6fa",
            padx=5,
            pady=2
        )
        add_button.grid(row=0, column=1, padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        reset_button = tk.Button(
            self.root,
            text="–°–±—Ä–æ—Å–∏—Ç—å",
            command=self.reset_water,
            bg="#ffb6c1",
            padx=10,
            pady=5
        )
        reset_button.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_button = tk.Button(
            self.root,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            command=self.open_settings,
            bg="#d8bfd8",
            padx=10,
            pady=5
        )
        settings_button.pack(pady=5)

    def add_water(self, amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–¥—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.current_water += amount
        self.update_display()
        self.check_goal()

    def add_custom_water(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–¥—É –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞."""
        try:
            amount = int(self.entry.get())
            self.add_water(amount)
            self.entry.delete(0, tk.END)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    def reset_water(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–æ–¥—ã."""
        self.current_water = 0
        self.update_display()

    def update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏."""
        progress_percent = (self.current_water / self.daily_goal) * 100
        self.progress["value"] = progress_percent
        self.progress_label.config(text=f"{int(progress_percent)}%")
        self.water_label.config(text=f"–í—ã–ø–∏—Ç–æ: {self.current_water} –º–ª / {self.daily_goal} –º–ª")

    def check_goal(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞."""
        if self.current_water >= self.daily_goal:
            messagebox.showinfo("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã!")

    def reminder_loop(self):
        """–¶–∏–∫–ª –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        while True:
            if self.reminder_enabled:
                current_time = time.time()
                if current_time - self.last_reminder_time > self.reminder_interval * 60:
                    self.last_reminder_time = current_time
                    self.root.after(0, self.show_reminder)
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    def show_reminder(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        if self.current_water < self.daily_goal:
            messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–ü–æ—Ä–∞ –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã! üíß")
            self.last_reminder_time = time.time()

    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        settings_window.geometry("300x200")
        settings_window.configure(bg="#f0f8ff")
        settings_window.resizable(False, False)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminder_var = tk.BooleanVar(value=self.reminder_enabled)
        reminder_check = tk.Checkbutton(
            settings_window,
            text="–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            variable=reminder_var,
            font=("Arial", 12),
            bg="#f0f8ff",
            command=lambda: self.toggle_reminders(reminder_var.get())
        )
        reminder_check.pack(pady=10)

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        interval_frame = tk.Frame(settings_window, bg="#f0f8ff")
        interval_frame.pack(pady=10)

        tk.Label(
            interval_frame,
            text="–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):",
            font=("Arial", 12),
            bg="#f0f8ff"
        ).grid(row=0, column=0, padx=5)

        interval_var = tk.IntVar(value=self.reminder_interval)
        interval_entry = tk.Entry(
            interval_frame,
            textvariable=interval_var,
            width=5,
            font=("Arial", 12)
        )
        interval_entry.grid(row=0, column=1, padx=5)

        save_button = tk.Button(
            settings_window,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=lambda: self.save_settings(interval_var.get()),
            bg="#4682b4",
            fg="white",
            padx=10,
            pady=5
        )
        save_button.pack(pady=20)

    def toggle_reminders(self, enabled):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        self.reminder_enabled = enabled
        if enabled:
            self.last_reminder_time = time.time()

    def save_settings(self, interval):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        if interval > 0:
            self.reminder_interval = interval
            self.last_reminder_time = time.time()
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")

if __name__ == "__main__":
    root = tk.Tk()
    app = WaterTrackerApp(root)
    root.mainloop()